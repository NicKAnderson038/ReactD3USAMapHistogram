{"version":3,"sources":["assets/preloading.png","Components/Preloader.js","DataHandling.js","Components/CountyMap/County.js","Components/CountyMap/CountyMap.js","Components/Histogram/HistogramBar.js","Components/Histogram/Axis.js","Components/D3blackbox.js","Components/Histogram/Histogram.js","Components/Meta/USStatesMap.js","Components/Meta/Title.js","Components/Meta/Description.js","Components/MedianLine.js","Components/Controls/Toggle.js","Components/Controls/ControlRow.js","Components/Controls/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","preloader","react_default","a","createElement","className","src","PreloaderImg","style","width","alt","cleanIncome","d","countyName","USstate","medianIncome","Number","lowerBound","upperBound","dateParse","d3","cleanSalary","employer","submit_date","start_date","case_status","job_title","clean_job_title","base_salary","city","county","countyID","cleanUSStateName","code","id","name","cleanCounty","ChoroplethColors","_","reverse","County","nextProps","nextState","_this$props","this","props","zoom","value","_this$props2","geoPath","feature","quantize","color","fill","title","Component","CountyMap","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","projection","scale","state","range","usTopoJson","values","_this$state","us","USstatesMesh","topojson","objects","states","b","counties","features","countyValueMap","fromPairs","map","CountyMap_County","key","stroke","strokeLineJoin","translate","height","USstatePaths","find","USstateNames","centroid","domain","objectSpread","HistogramBar","_ref","percent","x","y","concat","label","toFixed","replace","transform","textAnchor","D3render","Axis","axis","tickFormat","ticks","data","length","anchorRef","current","_Component","Blackbox","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","React","createRef","inherits","createClass","ref","Histogram","histogram","widthScale","yScale","makeBar","bar","axisMargin","x1","x0","Histogram_HistogramBar","_this$state2","bars","Histogram_Axis","thresholds","bins","counts","bottomMargin","USStatesMap","AL","AK","AS","AZ","AR","CA","CO","CT","DE","DC","FM","FL","GA","GU","HI","ID","IL","IN","IA","KS","KY","LA","ME","MH","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","MP","OH","OK","OR","PW","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","Title","mean","format","d3mean","yearsFragment","USstateFragment","jobTitleFragment","stateFragment","year","filteredBy","toUpperCase","_this$props$filteredB","jobTitle","scaleLinear","d3extent","Description","undefined","allData","filter","getFullYear","deviation","d3deviation","UStateFragment","previousYearFragment","countyFragment","fragment","lastYear","allDataForYear","allDataForJobTitle","allDataForUSstate","Math","abs","byCounty","groupBy","medians","medianIncomesByCounty","ordered","sortBy","keys","items","best","countyMedian","byCity","S","titleCase","s","jobFragment","yearFragment","href","MedianLine","median","line","medianValue","medianLabel","background","Toggle","onClick","ControlRow","makePick","picked","newState","updateDataFilter","capitalize","Controls_Toggle","_this2","toggleNames","_addToggle","Controls","yearFilter","jobTitleFilter","USstateFilter","updateYearFilter","reset","setState","reportUpdateUpTheChain","updateJobTitleFilter","updateUSstateFilter","_window$location$hash","window","location","hash","split","_window$location$hash2","slicedToArray","filters","join","years","Set","jobTitles","USstates","Controls_ControlRow","from","App","techSalaries","medianIncomes","countyNames","salariesFilter","callback","noop","Promise","all","then","_ref2","medianIncomesMap","forEach","isNull","medianIncomesByUSState","loadAllData","techSalariesMap","medianHousehold","salaries","_this3","Preloader","filteredSalaries","filteredSalariesMap","countyValues","countyValue","Meta_Title","Meta_Description","Components_CountyMap_CountyMap","Components_Histogram_Histogram","Components_MedianLine","Components_Controls","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8d4c49cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloading.0e87f8f1.png\";","import React from 'react'\nimport PreloaderImg from '../assets/preloading.png'\n\nconst preloader = () => {\n  return (\n    <div className=\"App container\">\n      <h1>The average H1B in tech pays $86,164/year</h1>\n      <p className=\"lead\">\n        Since 2012 the US tech industry has sponsored\n        176,075 H1B work visas. Most of them paid{' '}\n        <b>$60,660 to $111,668</b> per year (1 standard\n        deviation).{' '}\n        <span>\n          The best city for an H1B is <b>Kirkland, WA</b>{' '}\n          with an average individual salary{' '}\n          <b>$39,465 above local household median</b>.\n          Median household salary is a good proxy for cost\n          of living in an area.\n        </span>\n      </p>\n      <img\n        src={PreloaderImg}\n        style={{ width: '100%' }}\n        alt=\"Loading preview\"\n      />\n      <h2 className=\"text-center\">Loading data ...</h2>\n    </div>\n  )\n}\n\nexport default preloader\n","import * as d3 from 'd3'\nimport _ from 'lodash'\n\nconst cleanIncome = d => ({\n  countyName: d['Name'],\n  USstate: d['State'],\n  medianIncome: Number(d['Median Household Income']),\n  lowerBound: Number(d['90% CI Lower Bound']),\n  upperBound: Number(d['90% CI Upper Bound'])\n})\n\nconst dateParse = d3.timeParse('%m/%d/%Y')\n\nconst cleanSalary = d => {\n  if (!d['base salary'] || Number(d['base salary']) > 300000) {\n    return null\n  }\n\n  return {\n    employer: d.employer,\n    submit_date: dateParse(d['submit date']),\n    start_date: dateParse(d['start date']),\n    case_status: d['case status'],\n    job_title: d['job title'],\n    clean_job_title: d['job title'],\n    base_salary: Number(d['base salary']),\n    city: d['city'],\n    USstate: d['state'],\n    county: d['county'],\n    countyID: d['countyID']\n  }\n}\n\nconst cleanUSStateName = d => ({\n  code: d.code,\n  id: Number(d.id),\n  name: d.name\n})\n\nconst cleanCounty = d => ({\n  id: Number(d.id),\n  name: d.name\n})\n\nexport const loadAllData = (callback = _.noop) => {\n  Promise.all([\n    d3.json('data/us.json'),\n    d3.csv('data/us-county-names-normalized.csv', cleanCounty),\n    d3.csv('data/county-median-incomes.csv', cleanIncome),\n    d3.csv('data/h1bs-2012-2016-shortened.csv', cleanSalary),\n    d3.tsv('data/us-state-names.tsv', cleanUSStateName)\n  ]).then(([us, countyNames, medianIncomes, techSalaries, USstateNames]) => {\n    const medianIncomesMap = {}\n\n    medianIncomes\n      .filter(d => _.find(countyNames, { name: d['countyName'] }))\n      .forEach(d => {\n        d['countyID'] = _.find(countyNames, { name: d['countyName'] }).id\n        medianIncomesMap[d.countyID] = d\n      })\n\n    techSalaries = techSalaries.filter(d => !_.isNull(d))\n\n    callback({\n      usTopoJson: us,\n      countyNames: countyNames,\n      medianIncomes: medianIncomesMap,\n      medianIncomesByCounty: _.groupBy(medianIncomes, 'countyName'),\n      medianIncomesByUSState: _.groupBy(medianIncomes, 'USstate'),\n      techSalaries: techSalaries,\n      USstateNames: USstateNames\n    })\n  })\n}\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\n\nconst ChoroplethColors = _.reverse([\n    \"rgb(247,251,255)\",\n    \"rgb(222,235,247)\",\n    \"rgb(198,219,239)\",\n    \"rgb(158,202,225)\",\n    \"rgb(107,174,214)\",\n    \"rgb(66,146,198)\",\n    \"rgb(33,113,181)\",\n    \"rgb(8,81,156)\",\n    \"rgb(8,48,107)\"\n]);\nconst BlankColor = \"rgb(240,240,240)\";\n\nclass County extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { zoom, value } = this.props;\n\n        return zoom !== nextProps.zoom || value !== nextProps.value;\n    }\n\n    render() {\n        const { value, geoPath, feature, quantize } = this.props;\n\n        let color = BlankColor;\n\n        if (value) {\n            color = ChoroplethColors[quantize(value)];\n        }\n\n        return (\n            <path\n                d={geoPath(feature)}\n                style={{ fill: color }}\n                title={feature.id}\n            />\n        );\n    }\n}\nexport default County;","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport _ from \"lodash\";\n\nimport County from \"./County\";\n\nclass CountyMap extends Component {\n    constructor(props) {\n        super(props);\n\n        const projection = d3.geoAlbersUsa().scale(1280);\n\n        this.state = {\n            geoPath: d3.geoPath().projection(projection),\n            quantize: d3.scaleQuantize().range(d3.range(9)),\n            projection\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        let { projection, quantize, geoPath } = state;\n\n        projection\n            .translate([props.width / 2, props.height / 2])\n            .scale(props.width * 1.3);\n\n        if (props.zoom && props.usTopoJson) {\n            const us = props.usTopoJson,\n                USstatePaths = topojson.feature(us, us.objects.states).features,\n                id = _.find(props.USstateNames, { code: props.zoom }).id;\n\n            projection.scale(props.width * 4.5);\n\n            const centroid = geoPath.centroid(_.find(USstatePaths, { id: id })),\n                translate = projection.translate();\n\n            projection.translate([\n                translate[0] - centroid[0] + props.width / 2,\n                translate[1] - centroid[1] + props.height / 2\n            ]);\n        }\n\n        if (props.values) {\n            quantize.domain([\n                d3.quantile(props.values, 0.15, d => d.value),\n                d3.quantile(props.values, 0.85, d => d.value)\n            ]);\n        }\n\n        return {\n            ...state,\n            projection,\n            quantize\n        };\n    }\n\n    render() {\n        const { usTopoJson, values, zoom } = this.props,\n            { geoPath, quantize } = this.state;\n\n        if (!usTopoJson) {\n            return null;\n        } else {\n            const us = usTopoJson,\n                USstatesMesh = topojson.mesh(\n                    us,\n                    us.objects.states,\n                    (a, b) => a !== b\n                ),\n                counties = topojson.feature(us, us.objects.counties).features;\n\n            const countyValueMap = _.fromPairs(\n                values.map(d => [d.countyID, d.value])\n            );\n\n            return (\n                <g>\n                    {counties.map(feature => (\n                        <County\n                            geoPath={geoPath}\n                            feature={feature}\n                            zoom={zoom}\n                            key={feature.id}\n                            quantize={quantize}\n                            value={countyValueMap[feature.id]}\n                        />\n                    ))}\n\n                    <path\n                        d={geoPath(USstatesMesh)}\n                        style={{\n                            fill: \"none\",\n                            stroke: \"#fff\",\n                            strokeLineJoin: \"round\"\n                        }}\n                    />\n                </g>\n            );\n        }\n    }\n}\n\nexport default CountyMap;","import React from 'react'\n\nconst HistogramBar = ({ percent, x, y, width, height }) => {\n  let translate = `translate(${x}, ${y})`,\n    label = `${percent.toFixed(0)}%`\n\n  if (percent < 1) {\n    label = `${percent.toFixed(2)}%`\n  }\n\n  if (width < 20) {\n    label = label.replace('%', '')\n  }\n\n  if (width < 10) {\n    label = ''\n  }\n\n  return (\n    <g transform={translate} className=\"bar\">\n      <rect\n        width={width}\n        height={height - 2}\n        transform=\"translate(0, 1)\"\n      />\n      <text\n        textAnchor=\"end\"\n        x={width - 5}\n        y={height / 2 + 3}\n      >\n        {label}\n      </text>\n    </g>\n  )\n}\n\nexport default HistogramBar\n","import * as d3 from 'd3'\nimport D3blackbox from '../D3blackbox'\n\nconst Axis = D3blackbox(function() {\n  const axis = d3\n    .axisLeft()\n    .tickFormat(d => `${d3.format('.2s')(d)}`)\n    .scale(this.props.scale)\n    .ticks(this.props.data.length)\n\n  d3.select(this.anchorRef.current).call(axis)\n})\n\nexport default Axis\n","import React, { Component } from 'react'\n\nexport default function D3blackbox(D3render) {\n  return class Blackbox extends Component {\n    anchorRef = React.createRef()\n\n    componentDidMount() {\n      D3render.call(this)\n    }\n    componentDidUpdate() {\n      D3render.call(this)\n    }\n\n    render() {\n      const { x, y } = this.props\n      return (\n        <g\n          transform={`translate(${x}, ${y})`}\n          ref={this.anchorRef}\n        />\n      )\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport * as d3 from 'd3'\n\nimport HistogramBar from './HistogramBar'\nimport Axis from './Axis'\n\nclass Histogram extends Component {\n  state = {\n    histogram: d3.histogram(),\n    widthScale: d3.scaleLinear(),\n    yScale: d3.scaleLinear()\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let { histogram, widthScale, yScale } = state\n\n    histogram.thresholds(props.bins).value(props.value)\n\n    const bars = histogram(props.data),\n      counts = bars.map(d => d.length)\n\n    widthScale\n      .domain([d3.min(counts), d3.max(counts)])\n      .range([0, props.width - props.axisMargin])\n\n    yScale\n      .domain([0, d3.max(bars, d => d.x1)])\n      .range([\n        props.height - props.y - props.bottomMargin,\n        0\n      ])\n\n    return {\n      ...state,\n      histogram,\n      widthScale,\n      yScale\n    }\n  }\n\n  makeBar = bar => {\n    const { yScale, widthScale } = this.state\n\n    let percent =\n      (bar.length / this.props.data.length) * 100\n\n    let props = {\n      percent: percent,\n      x: this.props.axisMargin,\n      y: yScale(bar.x1),\n      width: widthScale(bar.length),\n      height: yScale(bar.x0) - yScale(bar.x1),\n      key: 'histogram-bar-' + bar.x0\n    }\n\n    return <HistogramBar {...props} />\n  }\n\n  render() {\n    const { histogram, yScale } = this.state,\n      { x, y, data, axisMargin } = this.props\n\n    const bars = histogram(data)\n\n    return (\n      <g\n        className=\"histogram\"\n        transform={`translate(${x}, ${y})`}\n      >\n        <g className=\"bars\">{bars.map(this.makeBar)}</g>\n        <Axis\n          x={axisMargin - 3}\n          y={0}\n          data={bars}\n          scale={yScale}\n        />\n      </g>\n    )\n  }\n}\n\nexport default Histogram\n","export default {\n  AL: 'Alabama',\n  AK: 'Alaska',\n  AS: 'American Samoa',\n  AZ: 'Arizona',\n  AR: 'Arkansas',\n  CA: 'California',\n  CO: 'Colorado',\n  CT: 'Connecticut',\n  DE: 'Delaware',\n  DC: 'District Of Columbia',\n  FM: 'Federated States Of Micronesia',\n  FL: 'Florida',\n  GA: 'Georgia',\n  GU: 'Guam',\n  HI: 'Hawaii',\n  ID: 'Idaho',\n  IL: 'Illinois',\n  IN: 'Indiana',\n  IA: 'Iowa',\n  KS: 'Kansas',\n  KY: 'Kentucky',\n  LA: 'Louisiana',\n  ME: 'Maine',\n  MH: 'Marshall Islands',\n  MD: 'Maryland',\n  MA: 'Massachusetts',\n  MI: 'Michigan',\n  MN: 'Minnesota',\n  MS: 'Mississippi',\n  MO: 'Missouri',\n  MT: 'Montana',\n  NE: 'Nebraska',\n  NV: 'Nevada',\n  NH: 'New Hampshire',\n  NJ: 'New Jersey',\n  NM: 'New Mexico',\n  NY: 'New York',\n  NC: 'North Carolina',\n  ND: 'North Dakota',\n  MP: 'Northern Mariana Islands',\n  OH: 'Ohio',\n  OK: 'Oklahoma',\n  OR: 'Oregon',\n  PW: 'Palau',\n  PA: 'Pennsylvania',\n  PR: 'Puerto Rico',\n  RI: 'Rhode Island',\n  SC: 'South Carolina',\n  SD: 'South Dakota',\n  TN: 'Tennessee',\n  TX: 'Texas',\n  UT: 'Utah',\n  VT: 'Vermont',\n  VI: 'Virgin Islands',\n  VA: 'Virginia',\n  WA: 'Washington',\n  WV: 'West Virginia',\n  WI: 'Wisconsin',\n  WY: 'Wyoming'\n}\n","import React, { Component } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport {\n  mean as d3mean,\n  extent as d3extent\n} from 'd3-array'\n\nimport USStatesMap from './USStatesMap'\n\nclass Title extends Component {\n  get yearsFragment() {\n    const year = this.props.filteredBy.year\n\n    return year === '*' ? '' : `in ${year}`\n  }\n\n  get USstateFragment() {\n    const USstate = this.props.filteredBy.USstate\n\n    return USstate === '*'\n      ? ''\n      : USStatesMap[USstate.toUpperCase()]\n  }\n\n  get jobTitleFragment() {\n    const { jobTitle, year } = this.props.filteredBy\n    let title = ''\n\n    if (jobTitle === '*') {\n      if (year === '*') {\n        title = 'The average H1B in tech pays'\n      } else {\n        title = 'The average tech H1B paid'\n      }\n    } else {\n      title = `Software ${jobTitle}s on an H1B`\n      if (year === '*') {\n        title += ' make'\n      } else {\n        title += ' made'\n      }\n    }\n\n    return title\n  }\n\n  get format() {\n    // format numbers using fake linear scale\n    return scaleLinear()\n      .domain(d3extent(this.props.data, d => d.base_salary))\n      .tickFormat()\n  }\n\n  render() {\n    const mean = this.format(\n      d3mean(this.props.data, d => d.base_salary)\n    )\n\n    let title\n\n    if (this.yearsFragment && this.USstateFragment) {\n      title = (\n        <h2>\n          In {this.USstateFragment}, {this.jobTitleFragment}\n          ${mean}/year {this.yearsFragment}\n        </h2>\n      )\n    } else {\n      title = (\n        <h2>\n          {this.jobTitleFragment} ${mean}/year\n          {this.USstateFragment\n            ? `in ${this.stateFragment}`\n            : ''}\n          {this.yearsFragment}\n        </h2>\n      )\n    }\n\n    return title\n  }\n}\n\nexport default Title\n","import React from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport {\n  mean as d3mean,\n  extent as d3extent,\n  deviation as d3deviation\n} from 'd3-array'\nimport _ from 'lodash'\nimport S from 'string'\n\nimport USStatesMap from './USStatesMap'\n\nclass Description extends React.Component {\n  allDataForYear(year, data = this.props.allData) {\n    return data.filter(\n      d => d.submit_date.getFullYear() === year\n    )\n  }\n\n  allDataForJobTitle(jobTitle, data = this.props.allData) {\n    return data.filter(d => d.clean_job_title === jobTitle)\n  }\n\n  allDataForUSstate(USstate, data = this.props.allData) {\n    return data.filter(d => d.USstate === USstate)\n  }\n\n  get yearsFragment() {\n    const year = this.props.filteredBy.year\n\n    return year === '*' ? '' : `In ${year}`\n  }\n\n  get USstateFragment() {\n    const USstate = this.props.filteredBy.USstate\n\n    return USstate === '*'\n      ? ''\n      : USStatesMap[USstate.toUpperCase()]\n  }\n\n  get previousYearFragment() {\n    const year = this.props.filteredBy.year\n\n    let fragment\n\n    if (year === '*') {\n      fragment = ''\n    } else if (year === 2012) {\n      fragment = ''\n    } else {\n      const { USstate, jobTitle } = this.props.filteredBy\n      let lastYear = this.allDataForYear(year - 1)\n\n      if (jobTitle !== '*') {\n        lastYear = this.allDataForJobTitle(\n          jobTitle,\n          lastYear\n        )\n      }\n\n      if (USstate !== '*') {\n        lastYear = this.allDataForUSstate(USstate, lastYear)\n      }\n\n      if (this.props.data.length / lastYear.length > 2) {\n        fragment =\n          ', ' +\n          (\n            this.props.data.length / lastYear.length\n          ).toFixed() +\n          ' times more than the year before'\n      } else {\n        const percent = (\n          (1 - lastYear.length / this.props.data.length) *\n          100\n        ).toFixed()\n\n        fragment =\n          ', ' +\n          Math.abs(percent) +\n          '% ' +\n          (percent > 0 ? 'more' : 'less') +\n          ' than the year before'\n      }\n    }\n\n    return fragment\n  }\n\n  get jobTitleFragment() {\n    const jobTitle = this.props.filteredBy.jobTitle\n    let fragment\n\n    if (jobTitle === '*') {\n      fragment = 'H1B work visas'\n    } else {\n      if (jobTitle === 'other') {\n        fragment = 'H1B work visas'\n      } else {\n        fragment = `H1B work visas for software ${jobTitle}s`\n      }\n    }\n\n    return fragment\n  }\n\n  get countyFragment() {\n    const byCounty = _.groupBy(this.props.data, 'countyID'),\n      medians = this.props.medianIncomesByCounty\n\n    let ordered = _.sortBy(\n      _.keys(byCounty)\n        .map(county => byCounty[county])\n        .filter(\n          d => d.length / this.props.data.length > 0.01\n        ),\n      items =>\n        d3mean(items, d => d.base_salary) -\n        medians[items[0].countyID][0].medianIncome\n    )\n\n    let best = ordered[ordered.length - 1],\n      countyMedian =\n        medians[best[0].countyID][0].medianIncome\n\n    const byCity = _.groupBy(best, 'city')\n\n    ordered = _.sortBy(\n      _.keys(byCity)\n        .map(city => byCity[city])\n        .filter(d => d.length / best.length > 0.01),\n      items =>\n        d3mean(items, d => d.base_salary) - countyMedian\n    )\n\n    best = ordered[ordered.length - 1]\n\n    const city =\n        S(best[0].city).titleCase().s +\n        `, ${best[0].USstate}`,\n      mean = d3mean(best, d => d.base_salary)\n\n    const jobFragment = this.jobTitleFragment\n      .replace('H1B work visas for', '')\n      .replace('H1B work visas', '')\n\n    return (\n      <span>\n        The best city{' '}\n        {jobFragment.length\n          ? `for ${jobFragment} on an H1B`\n          : 'for an H1B'}{' '}\n        {this.yearFragment ? 'was' : 'is'} <b>{city}</b>{' '}\n        with an average salary $\n        {this.format(mean - countyMedian)} above the local\n        household median. Median household income is a good\n        proxy for cost of living in an area.{' '}\n        <a href=\"https://en.wikipedia.org/wiki/Household_income\">\n          [1]\n        </a>\n        .\n      </span>\n    )\n  }\n\n  get format() {\n    return scaleLinear()\n      .domain(d3extent(this.props.data, d => d.base_salary))\n      .tickFormat()\n  }\n\n  render() {\n    const format = this.format,\n      mean = d3mean(this.props.data, d => d.base_salary),\n      deviation = d3deviation(\n        this.props.data,\n        d => d.base_salary\n      )\n\n    return (\n      <p className=\"lead\">\n        {this.yearsFragment\n          ? this.yearsFragment\n          : 'Since 2012'}{' '}\n        the {this.UStateFragment} tech industry{' '}\n        {this.yearsFragment ? 'sponsored' : 'has sponsored'}{' '}\n        <b>\n          {format(this.props.data.length)}{' '}\n          {this.jobTitleFragment}\n        </b>\n        {this.previousYearFragment}. Most of them paid{' '}\n        <b>\n          ${format(mean - deviation)} to $\n          {format(mean + deviation)}\n        </b>{' '}\n        per year. {this.countyFragment}\n      </p>\n    )\n  }\n}\n\nexport default Description\n","import React from 'react'\nimport * as d3 from 'd3'\n\nconst MedianLine = ({\n  data,\n  value,\n  width,\n  height,\n  x,\n  y,\n  bottomMargin,\n  median\n}) => {\n  const yScale = d3 // move median line vertically based on 'g' grouping element\n      .scaleLinear()\n      .domain([0, d3.max(data, value)])\n      .range([height - y - bottomMargin, 0]),\n    line = d3.line()([[0, 5], [width, 5]]) // ad3.line() array of pairs containing x & y coordinates\n\n  const medianValue = median || d3.median(data, value) // median calc\n\n  const translate = `translate(${x}, ${yScale(\n      medianValue\n    )})`,\n    medianLabel = `Median Household: $${yScale.tickFormat()(\n      median\n    )}`\n\n  return (\n    <g className=\"mean\" transform={translate}>\n      <text\n        x={width - 5}\n        y=\"0\"\n        textAnchor=\"end\"\n        style={{ background: 'purple' }}\n      >\n        {medianLabel}\n      </text>\n      <path d={line} />\n    </g>\n  )\n}\n\nexport default MedianLine\n","import React from 'react'\n\nconst Toggle = ({ label, name, value, onClick }) => {\n  let className = 'btn btn-default'\n\n  if (value) {\n    className += ' btn-primary'\n  }\n\n  return (\n    <button className={className} onClick={() => onClick(name, !value)}>\n      {label}\n    </button>\n  )\n}\n\nexport default Toggle\n","import React, { Component } from 'react'\n\nimport Toggle from './Toggle'\n\nclass ControlRow extends Component {\n  makePick = (picked, newState) => {\n    // if newState is false, we want to reset\n    this.props.updateDataFilter(picked, !newState)\n  } // cb for toggles\n\n  _addToggle(name) {\n    let key = `toggle-${name}`,\n      label = name\n\n    if (this.props.capitalize) {\n      label = label.toUpperCase()\n    }\n\n    return (\n      <Toggle\n        label={label}\n        name={name}\n        key={key}\n        value={this.props.picked === name}\n        onClick={this.makePick}\n      />\n    )\n  } // help generate buttons\n\n  render() {\n    const { toggleNames } = this.props\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          {toggleNames.map(name => this._addToggle(name))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ControlRow\n","import React, { Component } from 'react'\nimport ControlRow from './ControlRow'\n\nclass Controls extends Component {\n  state = {\n    yearFilter: () => true,\n    jobTitleFilter: () => true,\n    USstateFilter: () => true,\n    year: '*',\n    jobTitle: '*',\n    USstate: '*'\n  }\n\n  componentDidMount() {\n    let [year, USstate, jobTitle] = window.location.hash\n      .replace('#', '')\n      .split('-')\n\n    if (year !== '*' && year) {\n      this.updateYearFilter(Number(year))\n    }\n    if (USstate !== '*' && USstate) {\n      this.updateUSstateFilter(USstate)\n    }\n    if (jobTitle !== '*' && jobTitle) {\n      this.updateJobTitleFilter(jobTitle)\n    }\n  }\n\n  updateYearFilter = (year, reset) => {\n    let filter = d => d.submit_date.getFullYear() === year\n\n    if (reset || !year) {\n      filter = () => true\n      year = '*'\n    }\n\n    this.setState(\n      {\n        yearFilter: filter,\n        year: year\n      },\n      () => this.reportUpdateUpTheChain()\n    )\n  }\n\n  updateJobTitleFilter = (title, reset) => {\n    let filter = d => d.clean_job_title === title\n\n    if (reset || !title) {\n      filter = () => true\n      title = '*'\n    }\n\n    this.setState(\n      {\n        jobTitleFilter: filter,\n        jobTitle: title\n      },\n      () => this.reportUpdateUpTheChain()\n    )\n  }\n\n  updateUSstateFilter = (USstate, reset) => {\n    let filter = d => d.USstate === USstate\n\n    if (reset || !USstate) {\n      filter = () => true\n      USstate = '*'\n    }\n\n    this.setState(\n      {\n        USstateFilter: filter,\n        USstate: USstate\n      },\n      () => this.reportUpdateUpTheChain()\n    )\n  }\n\n  reportUpdateUpTheChain() {\n    window.location.hash = [\n      this.state.year || '*',\n      this.state.USstate || '*',\n      this.state.jobTitle || '*'\n    ].join('-')\n\n    this.props.updateDataFilter(\n      (filters => {\n        return d =>\n          filters.yearFilter(d) &&\n          filters.jobTitleFilter(d) &&\n          filters.USstateFilter(d)\n      })(this.state),\n      {\n        year: this.state.year,\n        jobTitle: this.state.jobTitle,\n        USstate: this.state.USstate\n      }\n    )\n  }\n\n  render() {\n    const { data } = this.props\n\n    const years = new Set(data.map(d => d.submit_date.getFullYear())),\n      jobTitles = new Set(data.map(d => d.clean_job_title)),\n      USstates = new Set(data.map(d => d.USstate))\n\n    return (\n      <div>\n        <ControlRow\n          data={data}\n          toggleNames={Array.from(years.values())}\n          picked={this.state.year}\n          updateDataFilter={this.updateYearFilter}\n        />\n\n        <ControlRow\n          data={data}\n          toggleNames={Array.from(jobTitles.values())}\n          picked={this.state.jobTitle}\n          updateDataFilter={this.updateJobTitleFilter}\n        />\n\n        <ControlRow\n          data={data}\n          toggleNames={Array.from(USstates.values())}\n          picked={this.state.USstate}\n          updateDataFilter={this.updateUSstateFilter}\n          capitalize\n        />\n      </div>\n    )\n  }\n}\n\nexport default Controls\n","import React, { Component } from 'react'\nimport * as d3 from 'd3'\nimport _ from 'lodash'\n\nimport './styles.css'\n\nimport Preloader from './Components/Preloader'\nimport { loadAllData } from './DataHandling'\n\nimport CountyMap from './Components/CountyMap'\nimport Histogram from './Components/Histogram'\nimport { Title, Description } from './Components/Meta'\nimport MedianLine from './Components/MedianLine'\n\nimport Controls from './Components/Controls'\n\nclass App extends Component {\n  state = {\n    techSalaries: [],\n    medianIncomes: [],\n    countyNames: [],\n    salariesFilter: () => true,\n    filteredBy: {\n      USstate: '*',\n      year: '*',\n      jobTitle: '*'\n    }\n  }\n\n  componentDidMount() {\n    loadAllData(data => this.setState(data))\n  }\n\n  countyValue(county, techSalariesMap) {\n    const medianHousehold = this.state.medianIncomes[county.id],\n      salaries = techSalariesMap[county.name]\n\n    if (!medianHousehold || !salaries) {\n      return null\n    }\n\n    const median = d3.median(salaries, d => d.base_salary)\n\n    return {\n      countyID: county.id,\n      value: median - medianHousehold.medianIncome\n    }\n  }\n\n  updateDataFilter = (filter, filteredBy) => {\n    this.setState({\n      salariesFilter: filter,\n      filteredBy: filteredBy\n    })\n  }\n\n  render() {\n    const {\n      techSalaries,\n      countyNames,\n      usTopoJson,\n      USstateNames,\n      filteredBy\n    } = this.state\n\n    if (techSalaries.length < 1) {\n      return <Preloader />\n    }\n\n    const filteredSalaries = techSalaries.filter(this.state.salariesFilter),\n      filteredSalariesMap = _.groupBy(filteredSalaries, 'countyID'),\n      countyValues = countyNames\n        .map(county => this.countyValue(county, filteredSalariesMap))\n        .filter(d => !_.isNull(d))\n\n    let zoom = null,\n      medianHousehold = this.state.medianIncomesByUSState['US'][0].medianIncome\n\n    if (filteredBy.USstate !== '*') {\n      zoom = this.state.filteredBy.USstate\n      medianHousehold = d3.mean(\n        this.state.medianIncomesByUSState[zoom],\n        d => d.medianIncome\n      )\n    }\n\n    return (\n      <div className=\"App container\">\n        <Title data={filteredSalaries} filteredBy={filteredBy} />\n        <Description\n          data={filteredSalaries}\n          allData={techSalaries}\n          filteredBy={filteredBy}\n          medianIncomesByCounty={this.state.medianIncomesByCounty}\n        />\n        <svg width=\"1100\" height=\"500\">\n          <CountyMap\n            usTopoJson={usTopoJson}\n            USstateNames={USstateNames}\n            values={countyValues}\n            x={0}\n            y={0}\n            width={500}\n            height={500}\n            zoom={zoom}\n          />\n\n          <rect\n            x=\"500\"\n            y=\"0\"\n            width=\"600\"\n            height=\"500\"\n            style={{ fill: 'white' }}\n          />\n\n          <Histogram\n            bins={10}\n            width={500}\n            height={500}\n            x={500}\n            y={10}\n            data={filteredSalaries}\n            axisMargin={83}\n            bottomMargin={5}\n            value={d => d.base_salary}\n          />\n          <MedianLine\n            data={filteredSalaries}\n            x={500}\n            y={10}\n            width={600}\n            height={500}\n            bottomMargin={5}\n            median={medianHousehold}\n            value={d => d.base_salary}\n          />\n        </svg>\n        <Controls\n          data={techSalaries}\n          updateDataFilter={this.updateDataFilter}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n\n\n/**\n * https://github.com/Swizec/react-d3-walkthrough-livecode/tree/fa0aa60f3f7ffeb12926553aaeb916a7fa1c4d4f/public/data\n * data source info\n */"],"sourceRoot":""}